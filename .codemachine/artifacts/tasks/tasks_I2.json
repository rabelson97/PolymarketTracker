[
  {
    "task_id": "I2.T1",
    "iteration_id": "I2",
    "iteration_goal": "Implement trade ingestion, wallet analysis logic (freshness, margin), caching interfaces, and supporting sequence documentation guided by architectural artifacts.",
    "description": "Build the Polymarket data fetcher service to retrieve and normalize recent trades; author OpenAPI v3 stub (`api/polymarket_client.yaml`) detailing used endpoints and payload schemas; add unit tests covering normalization logic.",
    "agent_type_hint": "BackendAgent",
    "inputs": "Section 2 Key Components, Task `I1.T3` adapter stubs.",
    "target_files": [
      "src/polymarket_tracker/services/data_fetcher.py",
      "api/polymarket_client.yaml",
      "tests/test_data_fetcher.py"
    ],
    "input_files": [
      "src/polymarket_tracker/adapters/polymarket_client.py",
      "docs/configuration.md"
    ],
    "deliverables": "Fetcher module with functions to pull trades within lookback, normalized trade dataclass, validated OpenAPI stub, and unit tests with mocked responses.",
    "acceptance_criteria": "Tests pass via `pytest tests/test_data_fetcher.py`; OpenAPI file validates with `speccy`/`openapi-spec-validator`; code adheres to linting and uses typed dataclasses/enums per plan.",
    "dependencies": [
      "I1.T3"
    ],
    "parallelizable": false,
    "done": false
  },
  {
    "task_id": "I2.T2",
    "iteration_id": "I2",
    "iteration_goal": "Implement trade ingestion, wallet analysis logic (freshness, margin), caching interfaces, and supporting sequence documentation guided by architectural artifacts.",
    "description": "Implement wallet analyzer logic covering freshness determination, margin computation, and orchestration of balance checks; generate PlantUML sequence diagram documenting the evaluation flow and store it at `docs/diagrams/wallet_evaluation_sequence.puml`.",
    "agent_type_hint": "BackendAgent",
    "inputs": "Section 2 Key Components, Task `I2.T1` normalized trade outputs, Task `I1.T2` diagrams.",
    "target_files": [
      "src/polymarket_tracker/services/wallet_analyzer.py",
      "docs/diagrams/wallet_evaluation_sequence.puml",
      "tests/test_wallet_analyzer.py"
    ],
    "input_files": [
      "src/polymarket_tracker/services/data_fetcher.py",
      "src/polymarket_tracker/adapters/balance_provider.py",
      "docs/diagrams/component_overview.puml"
    ],
    "deliverables": "Analyzer module with functions/classes to evaluate wallet freshness, compute margin, request balances; up-to-date sequence diagram; unit tests covering margin thresholds and caching interactions (using mocks).",
    "acceptance_criteria": "Tests pass (`pytest tests/test_wallet_analyzer.py`); sequence diagram renders without syntax errors and aligns with Section 2 communication patterns; code respects thresholds defined in configuration.",
    "dependencies": [
      "I2.T1",
      "I1.T3"
    ],
    "parallelizable": false,
    "done": false
  },
  {
    "task_id": "I2.T3",
    "iteration_id": "I2",
    "iteration_goal": "Implement trade ingestion, wallet analysis logic (freshness, margin), caching interfaces, and supporting sequence documentation guided by architectural artifacts.",
    "description": "Develop the storage layer (SQLite repository) for wallet snapshots and run metadata, including SQL schema initialization, CRUD helpers, and caching interface integration with analyzer.",
    "agent_type_hint": "DatabaseAgent",
    "inputs": "Data model overview (Section 2) and Task `I2.T2` analyzer requirements.",
    "target_files": [
      "src/polymarket_tracker/storage/cache_gateway.py",
      "src/polymarket_tracker/storage/models.py",
      "data/cache.sqlite",
      "tests/storage/test_cache_gateway.py"
    ],
    "input_files": [
      "src/polymarket_tracker/services/wallet_analyzer.py",
      "docs/diagrams/data_model.mmd"
    ],
    "deliverables": "Database schema definitions, repository functions, migration/init script, and tests validating persistence and retrieval of wallet snapshots.",
    "acceptance_criteria": "Tests in `tests/storage/test_cache_gateway.py` succeed using temporary SQLite; schema mirrors ERD relationships; analyzer integrates without unresolved imports; no direct coupling to external APIs.",
    "dependencies": [
      "I2.T2"
    ],
    "parallelizable": false,
    "done": false
  }
]