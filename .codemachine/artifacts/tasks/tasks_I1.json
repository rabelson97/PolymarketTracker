[
  {
    "task_id": "I1.T1",
    "iteration_id": "I1",
    "iteration_goal": "Stand up the project skeleton, configuration references, and baseline architectural diagrams/adapters to guide subsequent development.",
    "description": "Scaffold the Python project structure, initialize dependency management (pyproject/requirements), and draft the configuration reference (`docs/configuration.md`) including environment variable definitions for thresholds, lookback, and API endpoints.",
    "agent_type_hint": "SetupAgent",
    "inputs": "Section 3 directory structure and Section 1 assumptions.",
    "target_files": [
      "pyproject.toml",
      "requirements.txt",
      "README.md",
      ".env.example",
      "docs/configuration.md",
      "src/polymarket_tracker/__init__.py",
      "src/polymarket_tracker/config.py"
    ],
    "input_files": [],
    "deliverables": "Configured project skeleton with dependency files, initial README summary, sample environment file, and configuration module aligning with documented settings.",
    "acceptance_criteria": "Listed files exist with coherent content matching naming conventions; configuration doc enumerates all required variables with defaults; Python package imports without errors (`python -m polymarket_tracker` no-op) and passes `ruff`/`flake8` lint if configured.",
    "dependencies": [],
    "parallelizable": false,
    "done": false
  },
  {
    "task_id": "I1.T2",
    "iteration_id": "I1",
    "iteration_goal": "Stand up the project skeleton, configuration references, and baseline architectural diagrams/adapters to guide subsequent development.",
    "description": "Produce initial architectural artifacts: component diagram (`docs/diagrams/component_overview.puml`), data model ERD (`docs/diagrams/data_model.mmd`), and update architecture section of README with concise summary referencing these artifacts.",
    "agent_type_hint": "DiagrammingAgent",
    "inputs": "Section 2 Core Architecture, Section 2.1 artifact list, Task `I1.T1` outputs.",
    "target_files": [
      "docs/diagrams/component_overview.puml",
      "docs/diagrams/data_model.mmd",
      "README.md"
    ],
    "input_files": [
      "docs/configuration.md",
      "README.md"
    ],
    "deliverables": "Valid PlantUML and Mermaid source files rendering without syntax errors, README excerpt linking diagrams and summarizing architecture layers.",
    "acceptance_criteria": "Diagrams compile via PlantUML/Mermaid CLI; content matches Section 2 descriptions; README references new artifacts with correct relative paths.",
    "dependencies": [
      "I1.T1"
    ],
    "parallelizable": false,
    "done": false
  },
  {
    "task_id": "I1.T3",
    "iteration_id": "I1",
    "iteration_goal": "Stand up the project skeleton, configuration references, and baseline architectural diagrams/adapters to guide subsequent development.",
    "description": "Implement adapter interface stubs for Polymarket client and balance provider, plus Typer CLI skeleton wiring configuration loading and placeholder commands for `fetch` and `analyze` operations.",
    "agent_type_hint": "BackendAgent",
    "inputs": "Section 2 Key Components, Task `I1.T1` package structure.",
    "target_files": [
      "src/polymarket_tracker/cli.py",
      "src/polymarket_tracker/adapters/polymarket_client.py",
      "src/polymarket_tracker/adapters/balance_provider.py",
      "src/polymarket_tracker/services/__init__.py"
    ],
    "input_files": [
      "src/polymarket_tracker/config.py",
      "docs/configuration.md"
    ],
    "deliverables": "CLI module with Typer app entrypoint, adapter classes/interfaces containing method signatures and docstrings specifying expected behavior, and any necessary package initializers.",
    "acceptance_criteria": "CLI command (`python -m polymarket_tracker.cli --help`) runs; adapter stubs include typed method signatures aligning with future tasks; passes basic linting (if configured) and unit import tests.",
    "dependencies": [
      "I1.T1"
    ],
    "parallelizable": false,
    "done": false
  }
]